# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'classifier_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from keras.models import model_from_json
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
import os

def load_model():
    #载入模型
    model = model_from_json(open('model.json').read())
    model.load_weights('weights')
    return model

class Ui_MainWindow(object):
    def __init__(self):
        self.img_dir = None
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(320, 480, 101, 31))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.classify)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(490, 450, 261, 81))
        self.textBrowser.setObjectName("textBrowser")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(600, 430, 72, 20))
        self.label.setObjectName("label")
        self.graphicsView = QtWidgets.QLabel(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(140, 70, 531, 331))
        self.graphicsView.setObjectName("graphicsView")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(380, 40, 72, 15))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menuBar.setObjectName("menuBar")
        self.menu = QtWidgets.QMenu(self.menuBar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menuBar)
        self.localfile_action = QAction(MainWindow)
        self.localfile_action.setCheckable(False)
        self.localfile_action.setObjectName('localFileAction')
        self.localfile_action.triggered.connect(self.openImg)
        self.localfile_action.setText('输入图片')
        self.menuBar.addAction(self.localfile_action)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "识别"))
        self.label.setText(_translate("MainWindow", "结果"))
        self.label_2.setText(_translate("MainWindow", "图片"))
    
    def openImg(self):
        file_name, _ = QFileDialog.getOpenFileName(None, '选择图片', 'D:\\', 'Image files(*.jpg *.gif *.png)')
        self.graphicsView.setPixmap(QPixmap(file_name))
        self.img_dir = file_name
        
    def classify(self,img_dir):
        model = load_model()
        img_dir = self.img_dir
        categories = ['猫','狗']
        img = (Image.open(img_dir)).resize((224,224),Image.ANTIALIAS)
        img = ((np.array(img)).reshape(1,224,224,3))/255
        pred = model.predict(img)
        if pred.size > 1:
            name = categories[np.argmax(pred)]
            confidence = str(pred[0][np.argmax(pred[0])])
        else:
            if pred[0][0] <0.5:
                name = '猫'
                confidence = str(1-pred[0][0])
            else:
                name = '狗'
                confidence = str(pred[0][0])
        self.textBrowser.setText('预测结果为：'+name+'\n置信度为：'+confidence) 



